/* Generated By:JavaCC: Do not edit this line. ProyectoCalculadora.java */
public class ProyectoCalculadora implements ProyectoCalculadoraConstants {
    static TablaSimbolos TS = new TablaSimbolos();
    public static void main(String args[]) throws ParseException {
        ProyectoCalculadora parser = new ProyectoCalculadora(System.in);
        parser.Entrada();
    }

static int may(int a, int b) {return a>b?a:b;} //Para identificar el tipo de variable

static Tipo amp(int t, Tipo tip ){
    Tipo n = new Tipo();

    if(t==0){
        if(tip.id==0){
            n.vari = (int) tip.getvari();

        }
        else{
            n.vari = (int) tip.getvard();

        }n.id = 0;
    }else{
        if(tip.id==0){
            n.vard = (double) tip.getvari();
        }else{
            n.vard = (double) tip.getvard();
        }n.id=1;
    }
    return n;

}

  static final public void Entrada() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case DOBLE:
        Declarar();
        break;
      case ETIQ:
        Reasignacion();
        break;
      case PRINT:
        IMPRESION();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case ENTERO:
      case DOBLE:
      case ETIQ:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void IMPRESION() throws ParseException {
                  Tipo res;
    jj_consume_token(PRINT);
    jj_consume_token(CORIZQ);
    res = E();
        if(res.getid()==0)   {
            System.out.print("El resultado es "+res.getvari()+"\u005cn");
        }
        else{
            System.out.print("El resultado es "+res.getvard()+"\u005cn");
        }
    jj_consume_token(CORDER);
    jj_consume_token(PCOMA);
  }

  static final public void Declarar() throws ParseException {
                 int tipo; String nom; Tipo t1= new Tipo(0); Tipo t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      tipo = INT();
                t1= new Tipo(0);
      break;
    case DOBLE:
      tipo = DOUBLE();
                                                t1= new Tipo(0.0d);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    nom = IDEN();
                                                                                 //Tipo de dato e inicializacion
        TS.insertar(nom,t1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
    case COMA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        t1 = Asignar();
        t2=amp(tipo,t1);
        TS.cambiar(nom,t2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          label_2:
          while (true) {
            jj_consume_token(COMA);
            nom = IDEN();
                        TS.insertar(nom,t1);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IGUAL:
              t1 = Asignar();
                   t2=amp(tipo,t1); TS.cambiar(nom,t2);
              break;
            default:
              jj_la1[3] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMA:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_2;
            }
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      case COMA:
        label_3:
        while (true) {
          jj_consume_token(COMA);
          nom = IDEN();
                        TS.insertar(nom,t1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IGUAL:
            t1 = Asignar();
                       t2=amp(tipo,t1); TS.cambiar(nom,t2);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(PCOMA);
  }

  static final public Tipo Asignar() throws ParseException {
                Tipo t;
    jj_consume_token(IGUAL);
    t = E();
           {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void Reasignacion() throws ParseException {
                     int tipo; Tipo t1,t2; String nom; Simbolo sim;
    nom = IDEN();
               sim=TS.buscar(nom);
    t1 = Asignar();
    jj_consume_token(PCOMA);
                                                           tipo=sim.var.id; t2=amp(tipo,t1); TS.cambiar(nom,t2);
  }

  static final public String IDEN() throws ParseException {
  Token ide; String s;
    ide = jj_consume_token(ETIQ);
                s=String.valueOf(ide.image); {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public int INT() throws ParseException {
    jj_consume_token(ENTERO);
     {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public int DOUBLE() throws ParseException {
    jj_consume_token(DOBLE);
     {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo E() throws ParseException {
 Tipo val,sin;
    val = T();
    sin = Ep(val);
            val=sin;
        {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo Ep(Tipo her) throws ParseException {
 Tipo val,sin,x,y;
int tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        val = T();
     tipo=may(her.getid(),val.getid());
    x=amp(tipo,her);
    y=amp(tipo,val);
    if(tipo==0){
        int op1=x.vari;
        x.vari+=y.vari;
    }else{
        double op4=x.vard;
        x.vard+=y.vard;
    }
        sin = Ep(x);
            {if (true) return sin;}
        break;
      case RESTA:
        jj_consume_token(RESTA);
        val = T();
     tipo=may(her.getid(),val.getid());
        x=amp(tipo,her);
        y=amp(tipo,val);
        if(tipo==0){
            int op1=x.vari;
            x.vari-=y.vari;
        }
        else{
            double op4=x.vard;
            x.vard-=y.vard;
        }
        sin = Ep(x);
                 {if (true) return sin;}
     System.out.println("her: " + her + ", val: " + val +", sin: " + sin);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
        {if (true) return her;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo T() throws ParseException {
Tipo val,sin;
    val = F();
    sin = Tp(val);
    val=sin;
 {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo Tp(Tipo her) throws ParseException {
Tipo val,sin,x,y;
int tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACION:
    case DIVISION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        val = F();
 tipo=may(her.getid(),val.getid());
    x=amp(tipo,her);
    y=amp(tipo,val);
        if(tipo==0){
            int op1=x.vari;
            x.vari*=y.vari;
        }
        else{
            double op4=x.vard;
            x.vard*=y.vard;
        }
        sin = Tp(x);
                {if (true) return sin;}
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        val = F();
    tipo=may(her.getid(),val.getid());
    x=amp(tipo,her);
    y=amp(tipo,val);
    if(tipo==0){
        int op1=x.vari;
        x.vari/=y.vari;
    }else{
        double op4=x.vard;
        x.vard/=y.vard;
    }
        sin = Tp(x);
             {if (true) return sin;}
 System.out.println("her: " + her + ", val: " + val +", sin: " + sin);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if (true) return her;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo F() throws ParseException {
Tipo val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMINT:
    case NUMDOUBLE:
    case ETIQ:
      val = NUM();
      break;
    case PARIZQ:
      jj_consume_token(PARIZQ);
      val = E();
      jj_consume_token(PARDER);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

{if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  static final public Tipo NUM() throws ParseException {
Token valex;
Tipo val;
String s;
Simbolo sim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMINT:
      valex = jj_consume_token(NUMINT);
val = new Tipo(Integer.valueOf(valex.image));
{if (true) return val;}
      break;
    case NUMDOUBLE:
      valex = jj_consume_token(NUMDOUBLE);
val = new Tipo(Double.valueOf(valex.image));
{if (true) return val;}
      break;
    case ETIQ:
      valex = jj_consume_token(ETIQ);
s=String.valueOf(valex.image);
sim=TS.buscar(s);
val= sim.var;
{if (true) return val;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProyectoCalculadoraTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9c000,0x9c000,0x18000,0x800,0x1000,0x1000,0x800,0x1000,0x1800,0x1800,0x60,0x60,0x180,0x180,0xe0200,0xe0000,};
   }

  /** Constructor with InputStream. */
  public ProyectoCalculadora(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProyectoCalculadora(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProyectoCalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProyectoCalculadora(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProyectoCalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProyectoCalculadora(ProyectoCalculadoraTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProyectoCalculadoraTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
